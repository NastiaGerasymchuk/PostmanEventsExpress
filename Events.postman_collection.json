{
	"info": {
		"_postman_id": "abd704e3-50c1-496c-9f86-0e40a3505642",
		"name": "Events",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Home",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.be.withBody;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Event Schema\", function(){\r",
							"   var jsonData = pm.response.json();\r",
							"    var schema = pm.environment.get(\"EVENT_SCHEMA\");\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"      }\r",
							")\r",
							"\r",
							"pm.test(\"Is blocked events\", function(){\r",
							"   var jsonData = pm.response.json();    \r",
							"        jsonData.items.forEach(item=>pm.expect(item.isBlocked).to.false);\r",
							"      }\r",
							")\r",
							"\r",
							"pm.test(\"Is public events\", function(){\r",
							"   var jsonData = pm.response.json();\r",
							"   jsonData.items.forEach(item=>pm.expect(item.isPublic).to.true);\r",
							"      }\r",
							")\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    var timeResponse=Number(pm.globals.get(\"timeResponse\"));\r",
							"    pm.expect(pm.response.responseTime).to.be.below(timeResponse);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//pm.environment.set(\"eventCount\", '3');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/{{EVENT_URL}}/{{ALL_EVENTS_URL}}?page=1",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"{{EVENT_URL}}",
						"{{ALL_EVENTS_URL}}"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.environment.set(\"EVENT_TOKEN\", pm.response.json().token);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.sendRequest('https://postman-echo.com/get', function (err, res) {\r",
							"//         pm.expect(err).to.not.be.ok;\r",
							"//         pm.expect(res).to.have.property('code', 200);\r",
							"//         pm.expect(res).to.have.property('status', 'OK');\r",
							"//     });\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{ADMIN_EMAIL}}\",\r\n  \"password\": \"{{ADMIN_PASSWORD}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/{{AUTHENTICATION_URL}}/{{LOGIN_URL}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"{{AUTHENTICATION_URL}}",
						"{{LOGIN_URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Event Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;    \r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response).to.be.string;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function setEnvironment(envValue,outName){\r",
							"   var outValue= pm.iterationData.get(outName);\r",
							"   pm.environment.set(envValue,outValue); \r",
							"}\r",
							"setEnvironment(\"PHOTO_ID\",\"PhotoId\");\r",
							"setEnvironment(\"TITLE\",\"Title\");\r",
							"setEnvironment(\"DESCRIPTION\",\"Description\");\r",
							"setEnvironment(\"IS_RECCURENT\",\"IsReccurent\");\r",
							"setEnvironment(\"MAX_PARTICIPANTS\",\"MaxParticipants\");\r",
							"setEnvironment(\"PERIODICITY\",\"Periodicity\");\r",
							"setEnvironment(\"LOCATION_ONLINE_MEETING\", \"Location.OnlineMeeting\");\r",
							"setEnvironment(\"LOCATION_TYPE\",\"Location.Type\");\r",
							"setEnvironment(\"IS_PUBLIC\",\"IsPublic\");\r",
							"setEnvironment(\"CATEGORY_ID\",\"categories[0].id\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{EVENT_TOKEN}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "Title",
							"value": "{{TITLE}}",
							"type": "text"
						},
						{
							"key": "Description",
							"value": "{{DESCRIPTION}}",
							"type": "text"
						},
						{
							"key": "DateFrom",
							"value": "2021/09/09",
							"type": "text"
						},
						{
							"key": "DateTo",
							"value": "2021/10/10",
							"type": "text"
						},
						{
							"key": "IsReccurent",
							"value": "{{IS_RECCURENT}}",
							"type": "text"
						},
						{
							"key": "MaxParticipants",
							"value": "{{MAX_PARTICIPANTS}}",
							"type": "text"
						},
						{
							"key": "Frequency",
							"value": "{{FREQUENCY}}",
							"type": "text"
						},
						{
							"key": "Periodicity",
							"value": "{{PERIODICITY}}",
							"type": "text"
						},
						{
							"key": "Location.OnlineMeeting",
							"value": "{{LOCATION_ONLINE_MEETING}}",
							"type": "text"
						},
						{
							"key": "Location.Type",
							"value": "{{LOCATION_TYPE}}",
							"type": "text"
						},
						{
							"key": "IsPublic",
							"value": "{{IS_PUBLIC}}",
							"type": "text"
						},
						{
							"key": "categories[0].id",
							"value": "{{CATEGORY_ID}}",
							"type": "text"
						},
						{
							"key": "PhotoId",
							"value": "{{PHOTO_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{BASE_URL}}/{{EVENT_URL}}/{{CREATE_URL}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"{{EVENT_URL}}",
						"{{CREATE_URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "LogOut",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.json;\r",
							"    pm.response.to.be.withBody;   \r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 100ms\", function () {\r",
							"var timeLogOut=Number(pm.variables.get(\"LOGOUT_TIME_RESPONSE\"));\r",
							"    pm.expect(pm.response.responseTime).to.be.below(timeLogOut);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message\", function () {\r",
							"    var responseMessage = pm.environment.get(\"LOGOUT_MESSAGE\");\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.eql(responseMessage);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{EVENT_TOKEN}}",
							"type": "string"
						},
						{
							"key": "password",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/{{LOGOUT_URL}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"{{LOGOUT_URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "EventCreateNotAllowed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status\", function () {\r",
							"    pm.response.to.have.status(401);   \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{BASE_URL}}/{{EVENT_URL}}/{{CREATE_URL}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"{{EVENT_URL}}",
						"{{CREATE_URL}}"
					]
				}
			},
			"response": []
		}
	]
}